/*==============================================================*/
/* DBMS name:      ORACLE Version 11g                           */
/* Created on:     17.03.2014 2:49:40                           */
/*==============================================================*/



-- TYPE PACKAGE DECLARATION
CREATE OR REPLACE PACKAGE PDTYPES  
AS
    TYPE REF_CURSOR IS REF CURSOR;
END;

-- INTEGRITY PACKAGE DECLARATION
CREATE OR REPLACE PACKAGE INTEGRITYPACKAGE AS
 PROCEDURE INITNESTLEVEL;
 FUNCTION GETNESTLEVEL RETURN NUMBER;
 PROCEDURE NEXTNESTLEVEL;
 PROCEDURE PREVIOUSNESTLEVEL;
 END INTEGRITYPACKAGE;
/

-- INTEGRITY PACKAGE DEFINITION
CREATE OR REPLACE PACKAGE BODY INTEGRITYPACKAGE AS
 NESTLEVEL NUMBER;

-- PROCEDURE TO INITIALIZE THE TRIGGER NEST LEVEL
 PROCEDURE INITNESTLEVEL IS
 BEGIN
 NESTLEVEL := 0;
 END;


-- FUNCTION TO RETURN THE TRIGGER NEST LEVEL
 FUNCTION GETNESTLEVEL RETURN NUMBER IS
 BEGIN
 IF NESTLEVEL IS NULL THEN
     NESTLEVEL := 0;
 END IF;
 RETURN(NESTLEVEL);
 END;

-- PROCEDURE TO INCREASE THE TRIGGER NEST LEVEL
 PROCEDURE NEXTNESTLEVEL IS
 BEGIN
 IF NESTLEVEL IS NULL THEN
     NESTLEVEL := 0;
 END IF;
 NESTLEVEL := NESTLEVEL + 1;
 END;

-- PROCEDURE TO DECREASE THE TRIGGER NEST LEVEL
 PROCEDURE PREVIOUSNESTLEVEL IS
 BEGIN
 NESTLEVEL := NESTLEVEL - 1;
 END;

 END INTEGRITYPACKAGE;
/


DROP TRIGGER "COMPOUNDDELETETRIGGER_ESTIMATI"
/

DROP TRIGGER "COMPOUNDINSERTTRIGGER_ESTIMATI"
/

DROP TRIGGER "COMPOUNDUPDATETRIGGER_ESTIMATI"
/

DROP TRIGGER "TIB_ESTIMATION_RESULTS"
/

DROP TRIGGER "TUB_ESTIMATION_RESULTS"
/

DROP TRIGGER "COMPOUNDDELETETRIGGER_INTERNAL"
/

DROP TRIGGER "COMPOUNDINSERTTRIGGER_INTERNAL"
/

DROP TRIGGER "COMPOUNDUPDATETRIGGER_INTERNAL"
/

DROP TRIGGER "TDA_INTERNAL_TESTING_RESULTS"
/

DROP TRIGGER "TIB_INTERNAL_TESTING_RESULTS"
/

DROP TRIGGER "TUA_INTERNAL_TESTING_RESULTS"
/

DROP TRIGGER "TUB_INTERNAL_TESTING_RESULTS"
/

DROP TRIGGER "COMPOUNDDELETETRIGGER_INTRODUC"
/

DROP TRIGGER "COMPOUNDINSERTTRIGGER_INTRODUC"
/

DROP TRIGGER "COMPOUNDUPDATETRIGGER_INTRODUC"
/

DROP TRIGGER "TDA_INTRODUCING_RESULTS"
/

DROP TRIGGER "TUA_INTRODUCING_RESULTS"
/

DROP TRIGGER "COMPOUNDDELETETRIGGER_SYSTEM_T"
/

DROP TRIGGER "COMPOUNDINSERTTRIGGER_SYSTEM_T"
/

DROP TRIGGER "COMPOUNDUPDATETRIGGER_SYSTEM_T"
/

DROP TRIGGER "TDA_SYSTEM_TESTING_RESULTS"
/

DROP TRIGGER "TUA_SYSTEM_TESTING_RESULTS"
/

DROP TRIGGER "COMPOUNDDELETETRIGGER_UNIT_TES"
/

DROP TRIGGER "COMPOUNDINSERTTRIGGER_UNIT_TES"
/

DROP TRIGGER "COMPOUNDUPDATETRIGGER_UNIT_TES"
/

DROP TRIGGER "TDA_UNIT_TESTING_RESULTS"
/

DROP TRIGGER "TUA_UNIT_TESTING_RESULTS"
/

DROP TRIGGER "COMPOUNDDELETETRIGGER_IMPLEMEN"
/

DROP TRIGGER "COMPOUNDINSERTTRIGGER_IMPLEMEN"
/

DROP TRIGGER "COMPOUNDUPDATETRIGGER_IMPLEMEN"
/

DROP TRIGGER "TDA_IMPLEMENTATION_PLAN"
/

DROP TRIGGER "TUA_IMPLEMENTATION_PLAN"
/

DROP INDEX "COMPARE_INTRODUCING_PLAN_FK"
/

DROP INDEX "EVALUTE_INTRODUCING_RESULTS_FK"
/

DROP INDEX "EVALUATES_TEST_RESULTS_FK"
/

DROP TABLE "ESTIMATION_RESULTS" CASCADE CONSTRAINTS
/

DROP INDEX "ANALYSIS_UNIT_TESTING_FK"
/

DROP INDEX "ANALYSIS_SYSTEM_TESTING_FK"
/

DROP TABLE "INTERNAL_TESTING_RESULTS" CASCADE CONSTRAINTS
/

DROP TABLE "INTRODUCING_RESULTS" CASCADE CONSTRAINTS
/

DROP TABLE "SYSTEM_TESTING_RESULTS" CASCADE CONSTRAINTS
/

DROP TABLE "UNIT_TESTING_RESULTS" CASCADE CONSTRAINTS
/

DROP TABLE "IMPLEMENTATION_PLAN" CASCADE CONSTRAINTS
/

/*==============================================================*/
/* Table: "ESTIMATION_RESULTS"                                  */
/*==============================================================*/
CREATE TABLE "ESTIMATION_RESULTS" 
(
   "ESTIMATION_NUMBER"  SMALLINT             NOT NULL,
   "ESTIMATION_DATE"    DATE                 NOT NULL,
   "INTERNAL_RESULTS_DATE" DATE                 NOT NULL,
   "INTRODUCING_RESULT_NUMBER" INTEGER,
   "IMPLEMENTATION_PLAN_NAME" CHAR(20)             NOT NULL,
   "IMPLEMENTATION_PLAN_VERSION" SMALLINT             NOT NULL,
   "SUCCESS_PROBABILITY" SMALLINT,
   "EXPECTED_INCOME"    INTEGER,
   "NEED_INTRODUCTION"  SMALLINT,
   CONSTRAINT PK_ESTIMATION_RESULTS PRIMARY KEY ("ESTIMATION_NUMBER")
)
/

COMMENT ON TABLE "ESTIMATION_RESULTS" IS
'Estimation_Results'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."ESTIMATION_NUMBER" IS
'estimation_number'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."ESTIMATION_DATE" IS
'estimation_date'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."INTERNAL_RESULTS_DATE" IS
'internal_results_date'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."INTRODUCING_RESULT_NUMBER" IS
'introducing_result_number'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."IMPLEMENTATION_PLAN_NAME" IS
'implementation_plan_name'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."IMPLEMENTATION_PLAN_VERSION" IS
'implementation_plan_version'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."SUCCESS_PROBABILITY" IS
'success_probability'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."EXPECTED_INCOME" IS
'expected_income'
/

COMMENT ON COLUMN "ESTIMATION_RESULTS"."NEED_INTRODUCTION" IS
'need_introduction'
/

/*==============================================================*/
/* Index: "EVALUATES_TEST_RESULTS_FK"                           */
/*==============================================================*/
CREATE INDEX "EVALUATES_TEST_RESULTS_FK" ON "ESTIMATION_RESULTS" (
   "INTERNAL_RESULTS_DATE" ASC
)
/

/*==============================================================*/
/* Index: "EVALUTE_INTRODUCING_RESULTS_FK"                      */
/*==============================================================*/
CREATE INDEX "EVALUTE_INTRODUCING_RESULTS_FK" ON "ESTIMATION_RESULTS" (
   "INTRODUCING_RESULT_NUMBER" ASC
)
/

/*==============================================================*/
/* Index: "COMPARE_INTRODUCING_PLAN_FK"                         */
/*==============================================================*/
CREATE INDEX "COMPARE_INTRODUCING_PLAN_FK" ON "ESTIMATION_RESULTS" (
   "IMPLEMENTATION_PLAN_NAME" ASC,
   "IMPLEMENTATION_PLAN_VERSION" ASC
)
/

/*==============================================================*/
/* Table: "INTERNAL_TESTING_RESULTS"                            */
/*==============================================================*/
CREATE TABLE "INTERNAL_TESTING_RESULTS" 
(
   "INTERNAL_RESULTS_DATE" DATE                 NOT NULL,
   "SYSTEM_TESTING_NUMBER" SMALLINT,
   "UNIT_TESTING_NUMBER" SMALLINT,
   "USER_RATING"        SMALLINT,
   "PERCENT_EFFICIENCY_SOFTWARE" SMALLINT,
   "FIXES_BUGS_PERCENT" SMALLINT,
   "CRITICAL_STRIKE_CHANCE_BUG" SMALLINT,
   "AVAILABILITY_MAJOR_BUGS" SMALLINT,
   CONSTRAINT PK_INTERNAL_TESTING_RESULTS PRIMARY KEY ("INTERNAL_RESULTS_DATE")
)
/

COMMENT ON TABLE "INTERNAL_TESTING_RESULTS" IS
'Internal_Testing_Results'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."INTERNAL_RESULTS_DATE" IS
'internal_results_date'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."SYSTEM_TESTING_NUMBER" IS
'system_testing_number'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."UNIT_TESTING_NUMBER" IS
'unit_testing_number'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."USER_RATING" IS
'user_rating'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."PERCENT_EFFICIENCY_SOFTWARE" IS
'percent_efficiency_software'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."FIXES_BUGS_PERCENT" IS
'fixes_bugs_percent'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."CRITICAL_STRIKE_CHANCE_BUG" IS
'critical_strike_chance_bug'
/

COMMENT ON COLUMN "INTERNAL_TESTING_RESULTS"."AVAILABILITY_MAJOR_BUGS" IS
'availability_major_bugs'
/

/*==============================================================*/
/* Index: "ANALYSIS_SYSTEM_TESTING_FK"                          */
/*==============================================================*/
CREATE INDEX "ANALYSIS_SYSTEM_TESTING_FK" ON "INTERNAL_TESTING_RESULTS" (
   "SYSTEM_TESTING_NUMBER" ASC
)
/

/*==============================================================*/
/* Index: "ANALYSIS_UNIT_TESTING_FK"                            */
/*==============================================================*/
CREATE INDEX "ANALYSIS_UNIT_TESTING_FK" ON "INTERNAL_TESTING_RESULTS" (
   "UNIT_TESTING_NUMBER" ASC
)
/

/*==============================================================*/
/* Table: "INTRODUCING_RESULTS"                                 */
/*==============================================================*/
CREATE TABLE "INTRODUCING_RESULTS" 
(
   "INTRODUCING_RESULT_NUMBER" INTEGER              NOT NULL,
   "INTRODUCING_RESULT_DATE" DATE,
   "TOTAL_BUGS"         INTEGER,
   "TOTAL_USER_ESTIMATION" SMALLINT,
   "FUNDS_SPENT_ON_IMPLEMENTATION" INTEGER,
   "STABILITY"          SMALLINT,
   "PRELIMINARY_INCOME" INTEGER,
   CONSTRAINT PK_INTRODUCING_RESULTS PRIMARY KEY ("INTRODUCING_RESULT_NUMBER")
)
/

COMMENT ON TABLE "INTRODUCING_RESULTS" IS
'Introducing_Results'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."INTRODUCING_RESULT_NUMBER" IS
'introducing_result_number'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."INTRODUCING_RESULT_DATE" IS
'introducing_result_date'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."TOTAL_BUGS" IS
'total_bugs'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."TOTAL_USER_ESTIMATION" IS
'total_user_estimation'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."FUNDS_SPENT_ON_IMPLEMENTATION" IS
'funds_spent_on_implementation'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."STABILITY" IS
'stability'
/

COMMENT ON COLUMN "INTRODUCING_RESULTS"."PRELIMINARY_INCOME" IS
'preliminary_income'
/

/*==============================================================*/
/* Table: "SYSTEM_TESTING_RESULTS"                              */
/*==============================================================*/
CREATE TABLE "SYSTEM_TESTING_RESULTS" 
(
   "SYSTEM_TESTING_NUMBER" SMALLINT             NOT NULL,
   "SYSTEM_NAME"        CHAR(20),
   "TOTAL_BUGS"         INTEGER,
   "TOTAL_BUG_FIXES"    INTEGER,
   "TESTING_DATA"       DATE,
   "EVALUATION_USABILITY" SMALLINT,
   "EXERCISE_TESTING_EVALUATION" SMALLINT,
   "EVALUATION_UI"      SMALLINT,
   "EVALUATION_COMPATIBILITY" SMALLINT,
   "EVALUATION_SAFETY"  SMALLINT,
   "EVALUATION_PERFORMANCE" SMALLINT,
   CONSTRAINT PK_SYSTEM_TESTING_RESULTS PRIMARY KEY ("SYSTEM_TESTING_NUMBER")
)
/

COMMENT ON TABLE "SYSTEM_TESTING_RESULTS" IS
'System_Testing_Results'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."SYSTEM_TESTING_NUMBER" IS
'system_testing_number'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."SYSTEM_NAME" IS
'system_name'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."TOTAL_BUGS" IS
'total_bugs'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."TOTAL_BUG_FIXES" IS
'total_bug_fixes'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."TESTING_DATA" IS
'testing_data'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."EVALUATION_USABILITY" IS
'evaluation_usability'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."EXERCISE_TESTING_EVALUATION" IS
'exercise_testing_evaluation'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."EVALUATION_UI" IS
'evaluation_UI'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."EVALUATION_COMPATIBILITY" IS
'evaluation_compatibility'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."EVALUATION_SAFETY" IS
'evaluation_safety'
/

COMMENT ON COLUMN "SYSTEM_TESTING_RESULTS"."EVALUATION_PERFORMANCE" IS
'evaluation_performance'
/

/*==============================================================*/
/* Table: "UNIT_TESTING_RESULTS"                                */
/*==============================================================*/
CREATE TABLE "UNIT_TESTING_RESULTS" 
(
   "UNIT_TESTING_NUMBER" SMALLINT             NOT NULL,
   "SYSTEM_NAME"        CHAR(20),
   "TOTAL_BUGS"         INTEGER,
   "EVALUATION_REGRESSION_TESTING" SMALLINT,
   "MOCK-OBJECT_NUMBER" SMALLINT,
   "COVER_RATIO_UNIT_TESTS" SMALLINT,
   "REPORTED_BUGS_NUMBER" INTEGER,
   "TOTAL_BUG_FIXES"    INTEGER,
   "TESTING_DATA"       INTEGER,
   CONSTRAINT PK_UNIT_TESTING_RESULTS PRIMARY KEY ("UNIT_TESTING_NUMBER")
)
/

COMMENT ON TABLE "UNIT_TESTING_RESULTS" IS
'Unit_Testing_Results'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."UNIT_TESTING_NUMBER" IS
'unit_testing_number'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."SYSTEM_NAME" IS
'system_name'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."TOTAL_BUGS" IS
'total_bugs'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."EVALUATION_REGRESSION_TESTING" IS
'evaluation_regression_testing'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."MOCK-OBJECT_NUMBER" IS
'mock-object_number'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."COVER_RATIO_UNIT_TESTS" IS
'cover_ratio_unit_tests'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."REPORTED_BUGS_NUMBER" IS
'reported_bugs_number'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."TOTAL_BUG_FIXES" IS
'total_bug_fixes'
/

COMMENT ON COLUMN "UNIT_TESTING_RESULTS"."TESTING_DATA" IS
'testing_data'
/

/*==============================================================*/
/* Table: "IMPLEMENTATION_PLAN"                                 */
/*==============================================================*/
CREATE TABLE "IMPLEMENTATION_PLAN" 
(
   "IMPLEMENTATION_PLAN_VERSION" SMALLINT             NOT NULL,
   "IMPLEMENTATION_PLAN_NAME" CHAR(20)             NOT NULL,
   "IMPLEMENTATION_DATE" DATE,
   "EXPECTED_INCOME"    INTEGER,
   "STABILITY"          SMALLINT,
   "TOTAL_BUGS"         INTEGER,
   "TOTAL_USER_ESTIMATION" SMALLINT,
   CONSTRAINT PK_IMPLEMENTATION_PLAN PRIMARY KEY ("IMPLEMENTATION_PLAN_NAME", "IMPLEMENTATION_PLAN_VERSION")
)
/

COMMENT ON TABLE "IMPLEMENTATION_PLAN" IS
'implementation_Plan'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."IMPLEMENTATION_PLAN_VERSION" IS
'implementation_plan_version'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."IMPLEMENTATION_PLAN_NAME" IS
'implementation_plan_name'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."IMPLEMENTATION_DATE" IS
'implementation_date'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."EXPECTED_INCOME" IS
'expected_income'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."STABILITY" IS
'stability'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."TOTAL_BUGS" IS
'total_bugs'
/

COMMENT ON COLUMN "IMPLEMENTATION_PLAN"."TOTAL_USER_ESTIMATION" IS
'total_user_estimation'
/


CREATE OR REPLACE TRIGGER "COMPOUNDDELETETRIGGER_ESTIMATI"
FOR DELETE ON "ESTIMATION_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDINSERTTRIGGER_ESTIMATI"
FOR INSERT ON "ESTIMATION_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDUPDATETRIGGER_ESTIMATI"
FOR UPDATE ON "ESTIMATION_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE TRIGGER "TIB_ESTIMATION_RESULTS" BEFORE INSERT
ON "ESTIMATION_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    --  DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""INTERNAL_TESTING_RESULTS""
    CURSOR CPK1_"ESTIMATION_RESULTS"(VAR_"INTERNAL_RESULTS_DATE" DATE) IS
       SELECT 1
       FROM   "INTERNAL_TESTING_RESULTS"
       WHERE  "INTERNAL_RESULTS_DATE" = VAR_"INTERNAL_RESULTS_DATE"
        AND   VAR_"INTERNAL_RESULTS_DATE" IS NOT NULL;
    --  DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""INTRODUCING_RESULTS""
    CURSOR CPK2_"ESTIMATION_RESULTS"(VAR_"INTRODUCING_RESULT_NUMBER INTEGER) IS
       SELECT 1
       FROM   "INTRODUCING_RESULTS"
       WHERE  "INTRODUCING_RESULT_NUMBER" = VAR_"INTRODUCING_RESULT_NUMBER
        AND   VAR_"INTRODUCING_RESULT_NUMBER IS NOT NULL;
    --  DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""IMPLEMENTATION_PLAN""
    CURSOR CPK3_"ESTIMATION_RESULTS"(VAR_"IMPLEMENTATION_PLAN_NAME" VARCHAR,
                    VAR_"IMPLEMENTATION_PLAN_VERSI INTEGER) IS
       SELECT 1
       FROM   "IMPLEMENTATION_PLAN"
       WHERE  "IMPLEMENTATION_PLAN_NAME" = VAR_"IMPLEMENTATION_PLAN_NAME"
        AND   "IMPLEMENTATION_PLAN_VERSION" = VAR_"IMPLEMENTATION_PLAN_VERSI
        AND   VAR_"IMPLEMENTATION_PLAN_NAME" IS NOT NULL
        AND   VAR_"IMPLEMENTATION_PLAN_VERSI IS NOT NULL;

BEGIN
    --  PARENT ""INTERNAL_TESTING_RESULTS"" MUST EXIST WHEN INSERTING A CHILD IN ""ESTIMATION_RESULTS""
    IF :NEW."INTERNAL_RESULTS_DATE" IS NOT NULL THEN
       OPEN  CPK1_"ESTIMATION_RESULTS"(:NEW."INTERNAL_RESULTS_DATE");
       FETCH CPK1_"ESTIMATION_RESULTS" INTO DUMMY;
       FOUND := CPK1_"ESTIMATION_RESULTS"%FOUND;
       close CPK1_"ESTIMATION_RESULTS";
       if not found then
          errno  := -20002;
          errmsg := 'PARENT DOES NOT EXIST IN ""INTERNAL_TESTING_RESULTS"". CANNOT CREATE CHILD IN ""ESTIMATION_RESULTS"".';
          raise integrity_error;
       end if;
    end if;

    --  Parent ""INTRODUCING_RESULTS"" must exist when inserting a child in ""ESTIMATION_RESULTS""
    if :new."INTRODUCING_RESULT_NUMBER" is not null then
       open  CPK2_"ESTIMATION_RESULTS"(:new."INTRODUCING_RESULT_NUMBER");
       fetch CPK2_"ESTIMATION_RESULTS" into dummy;
       found := CPK2_"ESTIMATION_RESULTS"%FOUND;
       CLOSE CPK2_"ESTIMATION_RESULTS";
       IF NOT FOUND THEN
          ERRNO  := -20002;
          ERRMSG := 'PARENT DOES NOT EXIST IN ""INTRODUCING_RESULTS"". CANNOT CREATE CHILD IN ""ESTIMATION_RESULTS"".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT ""IMPLEMENTATION_PLAN"" MUST EXIST WHEN INSERTING A CHILD IN ""ESTIMATION_RESULTS""
    IF :NEW."IMPLEMENTATION_PLAN_NAME" IS NOT NULL AND
       :NEW."IMPLEMENTATION_PLAN_VERSION" IS NOT NULL THEN
       OPEN  CPK3_"ESTIMATION_RESULTS"(:NEW."IMPLEMENTATION_PLAN_NAME",
                      :NEW."IMPLEMENTATION_PLAN_VERSION");
       FETCH CPK3_"ESTIMATION_RESULTS" INTO DUMMY;
       FOUND := CPK3_"ESTIMATION_RESULTS"%FOUND;
       CLOSE CPK3_"ESTIMATION_RESULTS";
       IF NOT FOUND THEN
          ERRNO  := -20002;
          ERRMSG := 'PARENT DOES NOT EXIST IN ""IMPLEMENTATION_PLAN"". CANNOT CREATE CHILD IN ""ESTIMATION_RESULTS"".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/


CREATE TRIGGER "TUB_ESTIMATION_RESULTS" BEFORE UPDATE
OF "ESTIMATION_NUMBER",
   "INTERNAL_RESULTS_DATE",
   "INTRODUCING_RESULT_NUMBER",
   "IMPLEMENTATION_PLAN_NAME",
   "IMPLEMENTATION_PLAN_VERSION"
ON "ESTIMATION_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    SEQ NUMBER;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""INTERNAL_TESTING_RESULTS""
    CURSOR CPK1_"ESTIMATION_RESULTS"(VAR_"INTERNAL_RESULTS_DATE" DATE) IS
       SELECT 1
       FROM   "INTERNAL_TESTING_RESULTS"
       WHERE  "INTERNAL_RESULTS_DATE" = VAR_"INTERNAL_RESULTS_DATE"
        AND   VAR_"INTERNAL_RESULTS_DATE" IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""INTRODUCING_RESULTS""
    CURSOR CPK2_"ESTIMATION_RESULTS"(VAR_"INTRODUCING_RESULT_NUMBER INTEGER) IS
       SELECT 1
       FROM   "INTRODUCING_RESULTS"
       WHERE  "INTRODUCING_RESULT_NUMBER" = VAR_"INTRODUCING_RESULT_NUMBER
        AND   VAR_"INTRODUCING_RESULT_NUMBER IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""IMPLEMENTATION_PLAN""
    CURSOR CPK3_"ESTIMATION_RESULTS"(VAR_"IMPLEMENTATION_PLAN_NAME" VARCHAR,
                    VAR_"IMPLEMENTATION_PLAN_VERSI INTEGER) IS
       SELECT 1
       FROM   "IMPLEMENTATION_PLAN"
       WHERE  "IMPLEMENTATION_PLAN_NAME" = VAR_"IMPLEMENTATION_PLAN_NAME"
        AND   "IMPLEMENTATION_PLAN_VERSION" = VAR_"IMPLEMENTATION_PLAN_VERSI
        AND   VAR_"IMPLEMENTATION_PLAN_NAME" IS NOT NULL
        AND   VAR_"IMPLEMENTATION_PLAN_VERSI IS NOT NULL;

BEGIN
    SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
    --  PARENT ""INTERNAL_TESTING_RESULTS"" MUST EXIST WHEN UPDATING A CHILD IN ""ESTIMATION_RESULTS""
    IF (:NEW."INTERNAL_RESULTS_DATE" IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK1_"ESTIMATION_RESULTS"(:NEW."INTERNAL_RESULTS_DATE");
       FETCH CPK1_"ESTIMATION_RESULTS" INTO DUMMY;
       FOUND := CPK1_"ESTIMATION_RESULTS"%FOUND;
       close CPK1_"ESTIMATION_RESULTS";
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN ""INTERNAL_TESTING_RESULTS"". CANNOT UPDATE CHILD IN ""ESTIMATION_RESULTS"".';
          raise integrity_error;
       end if;
    end if;

    --  Parent ""INTRODUCING_RESULTS"" must exist when updating a child in ""ESTIMATION_RESULTS""
    if (:new."INTRODUCING_RESULT_NUMBER" is not null) and (seq = 0) then
       open  CPK2_"ESTIMATION_RESULTS"(:new."INTRODUCING_RESULT_NUMBER");
       fetch CPK2_"ESTIMATION_RESULTS" into dummy;
       found := CPK2_"ESTIMATION_RESULTS"%FOUND;
       CLOSE CPK2_"ESTIMATION_RESULTS";
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN ""INTRODUCING_RESULTS"". CANNOT UPDATE CHILD IN ""ESTIMATION_RESULTS"".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT ""IMPLEMENTATION_PLAN"" MUST EXIST WHEN UPDATING A CHILD IN ""ESTIMATION_RESULTS""
    IF (:NEW."IMPLEMENTATION_PLAN_NAME" IS NOT NULL) AND
       (:NEW."IMPLEMENTATION_PLAN_VERSION" IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK3_"ESTIMATION_RESULTS"(:NEW."IMPLEMENTATION_PLAN_NAME",
                      :NEW."IMPLEMENTATION_PLAN_VERSION");
       FETCH CPK3_"ESTIMATION_RESULTS" INTO DUMMY;
       FOUND := CPK3_"ESTIMATION_RESULTS"%FOUND;
       CLOSE CPK3_"ESTIMATION_RESULTS";
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN ""IMPLEMENTATION_PLAN"". CANNOT UPDATE CHILD IN ""ESTIMATION_RESULTS"".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/


CREATE OR REPLACE TRIGGER "COMPOUNDDELETETRIGGER_INTERNAL"
FOR DELETE ON "INTERNAL_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDINSERTTRIGGER_INTERNAL"
FOR INSERT ON "INTERNAL_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDUPDATETRIGGER_INTERNAL"
FOR UPDATE ON "INTERNAL_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE TRIGGER "TDA_INTERNAL_TESTING_RESULTS" AFTER DELETE
ON "INTERNAL_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  DELETE ALL CHILDREN IN ""ESTIMATION_RESULTS""
    DELETE "ESTIMATION_RESULTS"
    WHERE  "INTERNAL_RESULTS_DATE" = :OLD."INTERNAL_RESULTS_DATE";

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE TRIGGER "TIB_INTERNAL_TESTING_RESULTS" BEFORE INSERT
ON "INTERNAL_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    --  DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""SYSTEM_TESTING_RESULTS""
    CURSOR CPK1_"INTERNAL_TESTING_RESULTS(VAR_"SYSTEM_TESTING_NUMBER" INTEGER) IS
       SELECT 1
       FROM   "SYSTEM_TESTING_RESULTS"
       WHERE  "SYSTEM_TESTING_NUMBER" = VAR_"SYSTEM_TESTING_NUMBER"
        AND   VAR_"SYSTEM_TESTING_NUMBER" IS NOT NULL;
    --  DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""UNIT_TESTING_RESULTS""
    CURSOR CPK2_"INTERNAL_TESTING_RESULTS(VAR_"UNIT_TESTING_NUMBER" INTEGER) IS
       SELECT 1
       FROM   "UNIT_TESTING_RESULTS"
       WHERE  "UNIT_TESTING_NUMBER" = VAR_"UNIT_TESTING_NUMBER"
        AND   VAR_"UNIT_TESTING_NUMBER" IS NOT NULL;

BEGIN
    --  PARENT ""SYSTEM_TESTING_RESULTS"" MUST EXIST WHEN INSERTING A CHILD IN ""INTERNAL_TESTING_RESULTS""
    IF :NEW."SYSTEM_TESTING_NUMBER" IS NOT NULL THEN
       OPEN  CPK1_"INTERNAL_TESTING_RESULTS(:NEW."SYSTEM_TESTING_NUMBER");
       FETCH CPK1_"INTERNAL_TESTING_RESULTS INTO DUMMY;
       FOUND := CPK1_"INTERNAL_TESTING_RESULTS%FOUND;
       close CPK1_"INTERNAL_TESTING_RESULTS;
       if not found then
          errno  := -20002;
          errmsg := 'PARENT DOES NOT EXIST IN ""SYSTEM_TESTING_RESULTS"". CANNOT CREATE CHILD IN ""INTERNAL_TESTING_RESULTS"".';
          raise integrity_error;
       end if;
    end if;

    --  Parent ""UNIT_TESTING_RESULTS"" must exist when inserting a child in ""INTERNAL_TESTING_RESULTS""
    if :new."UNIT_TESTING_NUMBER" is not null then
       open  CPK2_"INTERNAL_TESTING_RESULTS(:new."UNIT_TESTING_NUMBER");
       fetch CPK2_"INTERNAL_TESTING_RESULTS into dummy;
       found := CPK2_"INTERNAL_TESTING_RESULTS%FOUND;
       CLOSE CPK2_"INTERNAL_TESTING_RESULTS;
       IF NOT FOUND THEN
          ERRNO  := -20002;
          ERRMSG := 'PARENT DOES NOT EXIST IN ""UNIT_TESTING_RESULTS"". CANNOT CREATE CHILD IN ""INTERNAL_TESTING_RESULTS"".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/


CREATE TRIGGER "TUA_INTERNAL_TESTING_RESULTS" AFTER UPDATE
OF "INTERNAL_RESULTS_DATE",
   "SYSTEM_TESTING_NUMBER",
   "UNIT_TESTING_NUMBER"
ON "INTERNAL_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  MODIFY PARENT CODE OF ""INTERNAL_TESTING_RESULTS"" FOR ALL CHILDREN IN ""ESTIMATION_RESULTS""
    IF (UPDATING('INTERNAL_RESULTS_DATE') AND :OLD."INTERNAL_RESULTS_DATE" != :NEW."INTERNAL_RESULTS_DATE") THEN
       UPDATE "ESTIMATION_RESULTS"
        SET   "INTERNAL_RESULTS_DATE" = :NEW."INTERNAL_RESULTS_DATE"
       WHERE  "INTERNAL_RESULTS_DATE" = :OLD."INTERNAL_RESULTS_DATE";
    END IF;

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE TRIGGER "TUB_INTERNAL_TESTING_RESULTS" BEFORE UPDATE
OF "INTERNAL_RESULTS_DATE",
   "SYSTEM_TESTING_NUMBER",
   "UNIT_TESTING_NUMBER"
ON "INTERNAL_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    SEQ NUMBER;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""SYSTEM_TESTING_RESULTS""
    CURSOR CPK1_"INTERNAL_TESTING_RESULTS(VAR_"SYSTEM_TESTING_NUMBER" INTEGER) IS
       SELECT 1
       FROM   "SYSTEM_TESTING_RESULTS"
       WHERE  "SYSTEM_TESTING_NUMBER" = VAR_"SYSTEM_TESTING_NUMBER"
        AND   VAR_"SYSTEM_TESTING_NUMBER" IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""UNIT_TESTING_RESULTS""
    CURSOR CPK2_"INTERNAL_TESTING_RESULTS(VAR_"UNIT_TESTING_NUMBER" INTEGER) IS
       SELECT 1
       FROM   "UNIT_TESTING_RESULTS"
       WHERE  "UNIT_TESTING_NUMBER" = VAR_"UNIT_TESTING_NUMBER"
        AND   VAR_"UNIT_TESTING_NUMBER" IS NOT NULL;

BEGIN
    SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
    --  PARENT ""SYSTEM_TESTING_RESULTS"" MUST EXIST WHEN UPDATING A CHILD IN ""INTERNAL_TESTING_RESULTS""
    IF (:NEW."SYSTEM_TESTING_NUMBER" IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK1_"INTERNAL_TESTING_RESULTS(:NEW."SYSTEM_TESTING_NUMBER");
       FETCH CPK1_"INTERNAL_TESTING_RESULTS INTO DUMMY;
       FOUND := CPK1_"INTERNAL_TESTING_RESULTS%FOUND;
       close CPK1_"INTERNAL_TESTING_RESULTS;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN ""SYSTEM_TESTING_RESULTS"". CANNOT UPDATE CHILD IN ""INTERNAL_TESTING_RESULTS"".';
          raise integrity_error;
       end if;
    end if;

    --  Parent ""UNIT_TESTING_RESULTS"" must exist when updating a child in ""INTERNAL_TESTING_RESULTS""
    if (:new."UNIT_TESTING_NUMBER" is not null) and (seq = 0) then
       open  CPK2_"INTERNAL_TESTING_RESULTS(:new."UNIT_TESTING_NUMBER");
       fetch CPK2_"INTERNAL_TESTING_RESULTS into dummy;
       found := CPK2_"INTERNAL_TESTING_RESULTS%FOUND;
       CLOSE CPK2_"INTERNAL_TESTING_RESULTS;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN ""UNIT_TESTING_RESULTS"". CANNOT UPDATE CHILD IN ""INTERNAL_TESTING_RESULTS"".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/


CREATE OR REPLACE TRIGGER "COMPOUNDDELETETRIGGER_INTRODUC"
FOR DELETE ON "INTRODUCING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDINSERTTRIGGER_INTRODUC"
FOR INSERT ON "INTRODUCING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDUPDATETRIGGER_INTRODUC"
FOR UPDATE ON "INTRODUCING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE TRIGGER "TDA_INTRODUCING_RESULTS" AFTER DELETE
ON "INTRODUCING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  DELETE ALL CHILDREN IN ""ESTIMATION_RESULTS""
    DELETE "ESTIMATION_RESULTS"
    WHERE  "INTRODUCING_RESULT_NUMBER" = :OLD."INTRODUCING_RESULT_NUMBER";

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE TRIGGER "TUA_INTRODUCING_RESULTS" AFTER UPDATE
OF "INTRODUCING_RESULT_NUMBER"
ON "INTRODUCING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  MODIFY PARENT CODE OF ""INTRODUCING_RESULTS"" FOR ALL CHILDREN IN ""ESTIMATION_RESULTS""
    IF (UPDATING('INTRODUCING_RESULT_NUMBER') AND :OLD."INTRODUCING_RESULT_NUMBER" != :NEW."INTRODUCING_RESULT_NUMBER") THEN
       UPDATE "ESTIMATION_RESULTS"
        SET   "INTRODUCING_RESULT_NUMBER" = :NEW."INTRODUCING_RESULT_NUMBER"
       WHERE  "INTRODUCING_RESULT_NUMBER" = :OLD."INTRODUCING_RESULT_NUMBER";
    END IF;

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE OR REPLACE TRIGGER "COMPOUNDDELETETRIGGER_SYSTEM_T"
FOR DELETE ON "SYSTEM_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDINSERTTRIGGER_SYSTEM_T"
FOR INSERT ON "SYSTEM_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDUPDATETRIGGER_SYSTEM_T"
FOR UPDATE ON "SYSTEM_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE TRIGGER "TDA_SYSTEM_TESTING_RESULTS" AFTER DELETE
ON "SYSTEM_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  DELETE ALL CHILDREN IN ""INTERNAL_TESTING_RESULTS""
    DELETE "INTERNAL_TESTING_RESULTS"
    WHERE  "SYSTEM_TESTING_NUMBER" = :OLD."SYSTEM_TESTING_NUMBER";

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE TRIGGER "TUA_SYSTEM_TESTING_RESULTS" AFTER UPDATE
OF "SYSTEM_TESTING_NUMBER"
ON "SYSTEM_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  MODIFY PARENT CODE OF ""SYSTEM_TESTING_RESULTS"" FOR ALL CHILDREN IN ""INTERNAL_TESTING_RESULTS""
    IF (UPDATING('SYSTEM_TESTING_NUMBER') AND :OLD."SYSTEM_TESTING_NUMBER" != :NEW."SYSTEM_TESTING_NUMBER") THEN
       UPDATE "INTERNAL_TESTING_RESULTS"
        SET   "SYSTEM_TESTING_NUMBER" = :NEW."SYSTEM_TESTING_NUMBER"
       WHERE  "SYSTEM_TESTING_NUMBER" = :OLD."SYSTEM_TESTING_NUMBER";
    END IF;

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE OR REPLACE TRIGGER "COMPOUNDDELETETRIGGER_UNIT_TES"
FOR DELETE ON "UNIT_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDINSERTTRIGGER_UNIT_TES"
FOR INSERT ON "UNIT_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDUPDATETRIGGER_UNIT_TES"
FOR UPDATE ON "UNIT_TESTING_RESULTS" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE TRIGGER "TDA_UNIT_TESTING_RESULTS" AFTER DELETE
ON "UNIT_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  DELETE ALL CHILDREN IN ""INTERNAL_TESTING_RESULTS""
    DELETE "INTERNAL_TESTING_RESULTS"
    WHERE  "UNIT_TESTING_NUMBER" = :OLD."UNIT_TESTING_NUMBER";

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE TRIGGER "TUA_UNIT_TESTING_RESULTS" AFTER UPDATE
OF "UNIT_TESTING_NUMBER"
ON "UNIT_TESTING_RESULTS" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  MODIFY PARENT CODE OF ""UNIT_TESTING_RESULTS"" FOR ALL CHILDREN IN ""INTERNAL_TESTING_RESULTS""
    IF (UPDATING('UNIT_TESTING_NUMBER') AND :OLD."UNIT_TESTING_NUMBER" != :NEW."UNIT_TESTING_NUMBER") THEN
       UPDATE "INTERNAL_TESTING_RESULTS"
        SET   "UNIT_TESTING_NUMBER" = :NEW."UNIT_TESTING_NUMBER"
       WHERE  "UNIT_TESTING_NUMBER" = :OLD."UNIT_TESTING_NUMBER";
    END IF;

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE OR REPLACE TRIGGER "COMPOUNDDELETETRIGGER_IMPLEMEN"
FOR DELETE ON "IMPLEMENTATION_PLAN" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDINSERTTRIGGER_IMPLEMEN"
FOR INSERT ON "IMPLEMENTATION_PLAN" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE OR REPLACE TRIGGER "COMPOUNDUPDATETRIGGER_IMPLEMEN"
FOR UPDATE ON "IMPLEMENTATION_PLAN" COMPOUND TRIGGER
// DECLARATION
// BODY
  BEFORE STATEMENT IS
  BEGIN
     NULL;
  END BEFORE STATEMENT;

  BEFORE EACH ROW IS
  BEGIN
     NULL;
  END BEFORE EACH ROW;

  AFTER EACH ROW IS
  BEGIN
     NULL;
  END AFTER EACH ROW;

  AFTER STATEMENT IS
  BEGIN
     NULL;
  END AFTER STATEMENT;

END
/


CREATE TRIGGER "TDA_IMPLEMENTATION_PLAN" AFTER DELETE
ON "IMPLEMENTATION_PLAN" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;

BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  DELETE ALL CHILDREN IN ""ESTIMATION_RESULTS""
    DELETE "ESTIMATION_RESULTS"
    WHERE  "IMPLEMENTATION_PLAN_NAME" = :OLD."IMPLEMENTATION_PLAN_NAME"
     AND   "IMPLEMENTATION_PLAN_VERSION" = :OLD."IMPLEMENTATION_PLAN_VERSION";

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/


CREATE TRIGGER "TUA_IMPLEMENTATION_PLAN" AFTER UPDATE
OF "IMPLEMENTATION_PLAN_VERSION",
   "IMPLEMENTATION_PLAN_NAME"
ON "IMPLEMENTATION_PLAN" FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
BEGIN
    INTEGRITYPACKAGE.NEXTNESTLEVEL;
    --  MODIFY PARENT CODE OF ""IMPLEMENTATION_PLAN"" FOR ALL CHILDREN IN ""ESTIMATION_RESULTS""
    IF (UPDATING('IMPLEMENTATION_PLAN_NAME') AND :OLD."IMPLEMENTATION_PLAN_NAME" != :NEW."IMPLEMENTATION_PLAN_NAME") OR
       (UPDATING('IMPLEMENTATION_PLAN_VERSION') AND :OLD."IMPLEMENTATION_PLAN_VERSION" != :NEW."IMPLEMENTATION_PLAN_VERSION") THEN
       UPDATE "ESTIMATION_RESULTS"
        SET   "IMPLEMENTATION_PLAN_NAME" = :NEW."IMPLEMENTATION_PLAN_NAME",
              "IMPLEMENTATION_PLAN_VERSION" = :NEW."IMPLEMENTATION_PLAN_VERSION"
       WHERE  "IMPLEMENTATION_PLAN_NAME" = :OLD."IMPLEMENTATION_PLAN_NAME"
        AND   "IMPLEMENTATION_PLAN_VERSION" = :OLD."IMPLEMENTATION_PLAN_VERSION";
    END IF;

    INTEGRITYPACKAGE.PREVIOUSNESTLEVEL;

--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       BEGIN
       INTEGRITYPACKAGE.INITNESTLEVEL;
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
       END;
END;
/

